-- Asset Management System for RedNet-Explorer
-- Manages images, styles, and other website assets

local assets = {}

-- Asset types and their handlers
assets.types = {
    -- NFP (Nitrogen Fingers Paint) images
    nfp = {
        extension = ".nfp",
        mimeType = "image/nfp",
        description = "CC:Tweaked image format",
        maxSize = 50000  -- 50KB limit
    },
    
    -- Configuration files
    config = {
        extension = ".cfg",
        mimeType = "text/plain",
        description = "Configuration file",
        maxSize = 10000  -- 10KB limit
    },
    
    -- Style sheets (custom format for terminal styling)
    style = {
        extension = ".style",
        mimeType = "text/css",
        description = "Terminal style sheet",
        maxSize = 20000  -- 20KB limit
    },
    
    -- Data files
    json = {
        extension = ".json",
        mimeType = "application/json",
        description = "JSON data file",
        maxSize = 100000  -- 100KB limit
    },
    
    -- Text resources
    txt = {
        extension = ".txt",
        mimeType = "text/plain",
        description = "Plain text file",
        maxSize = 50000  -- 50KB limit
    }
}

-- Default project structure
assets.projectStructure = {
    ["/"] = {type = "directory", description = "Project root"},
    ["/assets/"] = {type = "directory", description = "Asset files"},
    ["/assets/images/"] = {type = "directory", description = "NFP images"},
    ["/assets/styles/"] = {type = "directory", description = "Style sheets"},
    ["/assets/data/"] = {type = "directory", description = "Data files"},
    ["/config.cfg"] = {type = "file", description = "Site configuration"},
    ["/README.txt"] = {type = "file", description = "Project documentation"}
}

-- Initialize asset management for a project
function assets.initProject(projectPath)
    -- Create directory structure
    for path, info in pairs(assets.projectStructure) do
        local fullPath = fs.combine(projectPath, path)
        
        if info.type == "directory" then
            if not fs.exists(fullPath) then
                fs.makeDir(fullPath)
            end
        elseif info.type == "file" and not fs.exists(fullPath) then
            -- Create default files
            if path == "/config.cfg" then
                assets.createDefaultConfig(fullPath)
            elseif path == "/README.txt" then
                assets.createDefaultReadme(fullPath, projectPath)
            end
        end
    end
    
    return true
end

-- Create default configuration file
function assets.createDefaultConfig(path)
    local config = [[# RedNet-Explorer Site Configuration
# Generated by Asset Management System

[site]
name = "My Website"
description = "A RedNet-Explorer website"
author = "Webmaster"
version = "1.0"

[theme]
primary_color = "blue"
secondary_color = "lightBlue"
background = "black"
text_color = "white"
accent_color = "yellow"

[features]
enable_search = false
enable_comments = false
enable_analytics = true

[cache]
enable = true
ttl = 300  # seconds

[security]
require_auth = false
allowed_ips = []
]]
    
    local handle = fs.open(path, "w")
    if handle then
        handle.write(config)
        handle.close()
        return true
    end
    return false
end

-- Create default README
function assets.createDefaultReadme(path, projectName)
    local readme = string.format([[# %s

This is a RedNet-Explorer website project.

## Structure

- `/` - Website pages (RWML and Lua files)
- `/assets/` - Asset files
  - `/images/` - NFP image files
  - `/styles/` - Style configuration
  - `/data/` - JSON data files
- `/config.cfg` - Site configuration

## Development

1. Edit pages using the development portal
2. Add assets to the appropriate directories
3. Test locally with preview mode
4. Deploy to your server

## Assets

### Images
Place NFP images in `/assets/images/`. Create with `paint` program.

### Styles
Custom style sheets in `/assets/styles/` for advanced theming.

### Data
JSON data files in `/assets/data/` for dynamic content.

---
Generated by RedNet-Explorer Asset Management System
]], fs.getName(projectName))
    
    local handle = fs.open(path, "w")
    if handle then
        handle.write(readme)
        handle.close()
        return true
    end
    return false
end

-- Get asset type from filename
function assets.getType(filename)
    for typeName, typeInfo in pairs(assets.types) do
        if filename:match(typeInfo.extension .. "$") then
            return typeName, typeInfo
        end
    end
    return nil, nil
end

-- Validate asset file
function assets.validate(filePath)
    if not fs.exists(filePath) then
        return false, "File not found"
    end
    
    if fs.isDir(filePath) then
        return false, "Path is a directory"
    end
    
    local filename = fs.getName(filePath)
    local assetType, typeInfo = assets.getType(filename)
    
    if not assetType then
        return false, "Unknown asset type"
    end
    
    -- Check file size
    local size = fs.getSize(filePath)
    if size > typeInfo.maxSize then
        return false, string.format("File too large (max %d bytes)", typeInfo.maxSize)
    end
    
    -- Type-specific validation
    if assetType == "nfp" then
        return assets.validateNFP(filePath)
    elseif assetType == "json" then
        return assets.validateJSON(filePath)
    elseif assetType == "style" then
        return assets.validateStyle(filePath)
    end
    
    return true
end

-- Validate NFP image
function assets.validateNFP(filePath)
    local handle = fs.open(filePath, "r")
    if not handle then
        return false, "Cannot read file"
    end
    
    local firstLine = handle.readLine()
    handle.close()
    
    if not firstLine then
        return false, "Empty NFP file"
    end
    
    -- Basic NFP validation - check if it contains valid color codes
    local validChars = "0123456789abcdef "
    for i = 1, #firstLine do
        local char = firstLine:sub(i, i)
        if not validChars:find(char, 1, true) then
            return false, "Invalid NFP format"
        end
    end
    
    return true
end

-- Validate JSON file
function assets.validateJSON(filePath)
    local handle = fs.open(filePath, "r")
    if not handle then
        return false, "Cannot read file"
    end
    
    local content = handle.readAll()
    handle.close()
    
    -- Try to parse JSON
    local success, result = pcall(textutils.unserializeJSON, content)
    if not success then
        return false, "Invalid JSON: " .. tostring(result)
    end
    
    return true
end

-- Validate style file
function assets.validateStyle(filePath)
    local handle = fs.open(filePath, "r")
    if not handle then
        return false, "Cannot read file"
    end
    
    local content = handle.readAll()
    handle.close()
    
    -- Basic style validation - check for valid color names
    local validColors = {
        "white", "orange", "magenta", "lightBlue", "yellow", "lime",
        "pink", "gray", "lightGray", "cyan", "purple", "blue",
        "brown", "green", "red", "black"
    }
    
    -- Simple validation - just check if it's parseable
    local lines = {}
    for line in content:gmatch("[^\n]+") do
        table.insert(lines, line)
    end
    
    if #lines == 0 then
        return false, "Empty style file"
    end
    
    return true
end

-- List assets in a project
function assets.listAssets(projectPath)
    local assetList = {}
    local assetPath = fs.combine(projectPath, "assets")
    
    if not fs.exists(assetPath) or not fs.isDir(assetPath) then
        return assetList
    end
    
    -- Recursively scan asset directories
    local function scanDir(path, relativePath)
        local items = fs.list(path)
        
        for _, item in ipairs(items) do
            local fullPath = fs.combine(path, item)
            local relPath = fs.combine(relativePath, item)
            
            if fs.isDir(fullPath) then
                scanDir(fullPath, relPath)
            else
                local assetType, typeInfo = assets.getType(item)
                if assetType then
                    table.insert(assetList, {
                        path = relPath,
                        name = item,
                        type = assetType,
                        mimeType = typeInfo.mimeType,
                        size = fs.getSize(fullPath),
                        fullPath = fullPath
                    })
                end
            end
        end
    end
    
    scanDir(assetPath, "")
    
    -- Sort by path
    table.sort(assetList, function(a, b) return a.path < b.path end)
    
    return assetList
end

-- Copy asset to project
function assets.addAsset(projectPath, sourcePath, assetType)
    local filename = fs.getName(sourcePath)
    local typeInfo = assets.types[assetType]
    
    if not typeInfo then
        return false, "Unknown asset type"
    end
    
    -- Determine destination directory
    local destDir = "assets/"
    if assetType == "nfp" then
        destDir = "assets/images/"
    elseif assetType == "style" then
        destDir = "assets/styles/"
    elseif assetType == "json" then
        destDir = "assets/data/"
    end
    
    local destPath = fs.combine(projectPath, destDir .. filename)
    
    -- Ensure directory exists
    local dir = fs.getDir(destPath)
    if not fs.exists(dir) then
        fs.makeDir(dir)
    end
    
    -- Validate before copying
    local valid, err = assets.validate(sourcePath)
    if not valid then
        return false, err
    end
    
    -- Copy file
    fs.copy(sourcePath, destPath)
    
    return true, destPath
end

-- Remove asset from project
function assets.removeAsset(projectPath, assetPath)
    local fullPath = fs.combine(projectPath, "assets", assetPath)
    
    if not fs.exists(fullPath) then
        return false, "Asset not found"
    end
    
    fs.delete(fullPath)
    return true
end

-- Generate asset reference code
function assets.getReference(assetPath, assetType)
    if assetType == "nfp" then
        -- NFP image reference
        return string.format('<image src="/assets/%s" />', assetPath)
    elseif assetType == "json" then
        -- JSON data reference for Lua
        return string.format([[local data = json.decode(fs.open("/assets/%s", "r").readAll())]], assetPath)
    elseif assetType == "style" then
        -- Style reference
        return string.format('<link rel="stylesheet" href="/assets/%s" />', assetPath)
    else
        -- Generic reference
        return string.format('/assets/%s', assetPath)
    end
end

-- Create NFP image from text (simple ASCII art converter)
function assets.createTextImage(text, width, height, fgColor, bgColor)
    fgColor = fgColor or "0"  -- White
    bgColor = bgColor or "f"  -- Black
    
    local lines = {}
    
    -- Split text into lines
    local textLines = {}
    for line in text:gmatch("[^\n]*") do
        table.insert(textLines, line)
    end
    
    -- Create NFP lines
    for y = 1, height do
        local line = ""
        local textLine = textLines[y] or ""
        
        for x = 1, width do
            if x <= #textLine then
                line = line .. fgColor
            else
                line = line .. bgColor
            end
        end
        
        table.insert(lines, line)
    end
    
    return table.concat(lines, "\n")
end

-- Load configuration file
function assets.loadConfig(projectPath)
    local configPath = fs.combine(projectPath, "config.cfg")
    
    if not fs.exists(configPath) then
        return {}
    end
    
    local config = {}
    local currentSection = nil
    
    local handle = fs.open(configPath, "r")
    if handle then
        local line = handle.readLine()
        while line do
            -- Skip comments and empty lines
            if not line:match("^#") and line:match("%S") then
                -- Section header
                local section = line:match("^%[(.+)%]$")
                if section then
                    currentSection = section
                    config[section] = config[section] or {}
                else
                    -- Key-value pair
                    local key, value = line:match("^(%w+)%s*=%s*(.+)$")
                    if key and value and currentSection then
                        -- Remove comments from value
                        value = value:gsub("#.*$", ""):match("^%s*(.-)%s*$")
                        
                        -- Parse value type
                        if value == "true" then
                            value = true
                        elseif value == "false" then
                            value = false
                        elseif tonumber(value) then
                            value = tonumber(value)
                        elseif value:match("^%[.*%]$") then
                            -- Simple array parsing
                            value = {}
                        elseif value:match('^".*"$') then
                            value = value:sub(2, -2)
                        end
                        
                        config[currentSection][key] = value
                    end
                end
            end
            
            line = handle.readLine()
        end
        handle.close()
    end
    
    return config
end

-- Save configuration file
function assets.saveConfig(projectPath, config)
    local configPath = fs.combine(projectPath, "config.cfg")
    
    local handle = fs.open(configPath, "w")
    if not handle then
        return false, "Cannot write config file"
    end
    
    handle.writeLine("# RedNet-Explorer Site Configuration")
    handle.writeLine("# Modified: " .. os.date("%Y-%m-%d %H:%M:%S"))
    handle.writeLine("")
    
    -- Write sections
    for section, values in pairs(config) do
        handle.writeLine("[" .. section .. "]")
        
        for key, value in pairs(values) do
            local valueStr = tostring(value)
            
            if type(value) == "string" then
                valueStr = '"' .. value .. '"'
            elseif type(value) == "table" then
                valueStr = "[]"  -- Simple array representation
            end
            
            handle.writeLine(key .. " = " .. valueStr)
        end
        
        handle.writeLine("")
    end
    
    handle.close()
    return true
end

return assets